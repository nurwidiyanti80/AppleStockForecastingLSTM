# -*- coding: utf-8 -*-
"""A13_AppleStock.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PGwuH7YVKBvJTmDMT5fTFsPwlZcnIhum
"""

pip install tensorflow

import pandas as pd

# Baca file dan tampilkan dulu beberapa baris awal
df = pd.read_csv('sample_data/apple_stock_data.csv')
print(df.head(5))  # untuk mengecek baris pertama

# Jika kolom tanggal tidak bernama 'Date', ganti sesuai kolom yang benar
# Coba ubah nama kolom (misal 'Price') menjadi 'Date'
df.rename(columns={'Price': 'Date'}, inplace=True)

# Konversi ke format datetime dengan bantuan format eksplisit
df['Date'] = pd.to_datetime(df['Date'], format='%m/%d/%Y', errors='coerce')  # penting: errors='coerce'

# Drop baris yang gagal diparse
df.dropna(subset=['Date'], inplace=True)

# Sortir dan set index
df.sort_values('Date', inplace=True)
df.set_index('Date', inplace=True)

print(df.head())

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Load data
df = pd.read_csv('sample_data/apple_stock_data.csv')
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
df.dropna(subset=['Date'], inplace=True)
df.set_index('Date', inplace=True)
df.sort_index(inplace=True)

# Gunakan kolom 'Close' saja
data = df[['Close']].values

# Normalisasi
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# Sequence function
def create_sequences(data, seq_length):
    X, y = [], []
    for i in range(seq_length, len(data)):
        X.append(data[i-seq_length:i])
        y.append(data[i])
    return np.array(X), np.array(y)

# Buat sequence
SEQ_LEN = 60
X, y = create_sequences(scaled_data, SEQ_LEN)

# Split data
split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# Model LSTM
model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(SEQ_LEN, 1)),
    LSTM(50),
    Dense(1)
])
model.compile(optimizer='adam', loss='mean_squared_error')

# Train model
model.fit(X_train, y_train, epochs=10, batch_size=32)

# Prediksi
predicted = model.predict(X_test)
predicted_prices = scaler.inverse_transform(predicted)
real_prices = scaler.inverse_transform(y_test)

# Plot
plt.figure(figsize=(14, 6))
plt.plot(real_prices, label='Actual Price')
plt.plot(predicted_prices, label='Predicted Price')
plt.title('Apple Stock Price Prediction (LSTM)')
plt.xlabel('Days')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()





import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import load_model

# --- Siapkan data dan model ---
# Misalnya kamu sudah punya df dan model terlatih:
# df = pd.read_csv(...) dan model = load_model('model_lstm.h5')

# Gunakan harga 'Close' dan fit scaler
close_data = df[['Close']].values
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(close_data)

# Ambil 60 hari terakhir
last_sequence = scaled_data[-60:]

# Buat daftar tanggal kerja dari 2 Januari 2025 sampai 29 Agustus 2025
start_date = pd.to_datetime('2025-01-02')
end_date = pd.to_datetime('2025-08-29')
future_dates = pd.bdate_range(start=start_date, end=end_date)
future_days = len(future_dates)

# Prediksi multi-step
future_predictions = []

for _ in range(future_days):
    input_seq = last_sequence.reshape(1, 60, 1)
    next_price_scaled = model.predict(input_seq, verbose=0)[0]
    future_predictions.append(next_price_scaled)
    last_sequence = np.append(last_sequence[1:], [next_price_scaled], axis=0)

# Kembalikan ke skala harga asli
predicted_prices = scaler.inverse_transform(future_predictions)

# Buat DataFrame hasil prediksi
future_df = pd.DataFrame({
    'Date': future_dates,
    'Predicted_Close': predicted_prices.flatten()
})
future_df.set_index('Date', inplace=True)

# Plot hasil prediksi
plt.figure(figsize=(14, 6))
plt.plot(future_df, label='Prediksi Jan–Ags 2025', color='orange')
plt.title('Prediksi Harga Saham Jan–Agustus 2025')
plt.xlabel('Tanggal')
plt.ylabel('Harga Saham (USD)')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

# Simpan ke CSV (opsional)
# future_df.to_csv('prediksi_jan_ags_2025.csv')

# Tampilkan sebagian hasil
print(future_df.head(10))

pip install pandas matplotlib scikit-learn tensorflow

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

# Load CSV
df = pd.read_csv("sample_data/apple_stock_data.csv")

# Convert 'Date' column to datetime
df['Date'] = pd.to_datetime(df['Date'])
df = df.sort_values('Date')

# Gunakan hanya kolom 'Close' untuk prediksi
data = df[['Date', 'Close']].copy()
data.set_index('Date', inplace=True)

# Normalize data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Set window size
window_size = 60
X = []
y = []

for i in range(window_size, len(scaled_data)):
    X.append(scaled_data[i - window_size:i, 0])
    y.append(scaled_data[i, 0])

X, y = np.array(X), np.array(y)

# Reshape untuk LSTM
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Build LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(LSTM(units=50))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X, y, epochs=10, batch_size=32)

# Forecast 22 hari di Januari 2025
forecast_days = 22
last_sequence = scaled_data[-window_size:]
forecast = []

for _ in range(forecast_days):
    X_pred = np.reshape(last_sequence, (1, window_size, 1))
    next_value = model.predict(X_pred, verbose=0)
    forecast.append(next_value[0, 0])
    last_sequence = np.append(last_sequence[1:], next_value, axis=0)

# Balikkan ke skala harga asli
forecast_prices = scaler.inverse_transform(np.array(forecast).reshape(-1, 1))

# Buat indeks tanggal untuk Januari 2025
last_date = data.index[-1]
future_dates = pd.date_range(start='2025-01-01', periods=forecast_days, freq='B')  # B = business day

# Plot actual dan forecast
plt.figure(figsize=(14, 6))
plt.plot(data.index[-100:], data['Close'][-100:], label='Training Data (Last 100 Days)')
plt.plot(future_dates, forecast_prices, label='Forecast Jan 2025', color='red')
plt.title('Apple Stock Price Forecast - Jan 2025')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()